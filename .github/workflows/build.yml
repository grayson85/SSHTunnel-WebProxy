name: Build SSH Tunnel GUI App
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Native builds only
          - os: ubuntu-latest
            arch: amd64
            suffix: linux-amd64
          - os: macos-13  # Intel Mac
            arch: amd64
            suffix: macos-amd64
          - os: macos-14  # Apple Silicon Mac
            arch: arm64
            suffix: macos-arm64
          - os: windows-latest
            arch: amd64
            suffix: windows-amd64
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4
      
      # Step 2: Setup Go
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      # Step 3: Install Fyne tool
      - run: go install fyne.io/fyne/v2/cmd/fyne@latest
      
      # Step 4: Linux dependencies
      - if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgl1-mesa-dev libx11-dev libxi-dev \
            libxcursor-dev libxrandr-dev libxinerama-dev libxxf86vm-dev
      
      # Step 5: macOS dependencies
      - if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install glfw || true
      
      # Step 6: Build Linux binary
      - if: runner.os == 'Linux'
        run: |
          BIN_NAME="ssh-tunnel-gui-${{ matrix.suffix }}"
          go build -ldflags="-s -w" -o "$BIN_NAME" main.go
          ls -la
      
      # Step 7: Build macOS .app and zip
      - if: runner.os == 'macOS'
        run: |
          BIN_NAME="ssh-tunnel-gui-${{ matrix.suffix }}"
          if [ -f "ssh.png" ]; then
            fyne package -os darwin -name "$BIN_NAME" -icon ssh.png
          else
            fyne package -os darwin -name "$BIN_NAME"
          fi
          zip -r "$BIN_NAME.app.zip" "$BIN_NAME.app"
          # Clean up to avoid uploading individual app contents
          rm -rf "$BIN_NAME.app"
          ls -la
      
      # Step 8: Build Windows .exe
      - if: runner.os == 'Windows'
        run: |
          $BIN_NAME = "ssh-tunnel-gui-${{ matrix.suffix }}"
          if (Test-Path "ssh.png") {
            fyne package -os windows -name $BIN_NAME -icon ssh.png
          } else {
            fyne package -os windows -name $BIN_NAME
          }
          Get-ChildItem
        shell: powershell
      
      # Step 9: Upload build artifacts (only final binaries)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssh-tunnel-gui-${{ matrix.suffix }}
          path: |
            ssh-tunnel-gui-${{ matrix.suffix }}
            ssh-tunnel-gui-${{ matrix.suffix }}.app.zip
            ssh-tunnel-gui-${{ matrix.suffix }}.exe
          retention-days: 30

  # Release job - runs after all builds complete
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Display structure
        run: find ./artifacts -type f
      
      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          find ./artifacts -name "ssh-tunnel-gui-*" -type f -exec cp {} ./release-files/ \;
          find ./artifacts -name "*.app.zip" -type f -exec cp {} ./release-files/ \;
          find ./artifacts -name "*.exe" -type f -exec cp {} ./release-files/ \;
          ls -la ./release-files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0-${{ github.run_number }}
          name: Release v1.0-${{ github.run_number }}
          files: ./release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
