name: Build SSH Tunnel GUI App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      # Step 1: Get existing release (v1.0)
      - name: Get Release
        id: get_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "v1.0"
            });
            return { upload_url: release.data.upload_url };

  build:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install Fyne tool
        run: go install fyne.io/tools/cmd/fyne@latest

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgl1-mesa-dev libx11-dev libxi-dev \
            libxcursor-dev libxrandr-dev libxinerama-dev libxxf86vm-dev libvulkan-dev

      # macOS dependencies
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install glfw

      # Build Linux
      - name: Build Linux binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          BIN_NAME="ssh-tunnel-gui-linux-${{ matrix.arch }}"
          go build -o $BIN_NAME main.go

      # Build macOS
      - name: Build macOS binary
        if: matrix.os == 'macos-latest'
        run: |
          BIN_NAME="ssh-tunnel-gui-macos-${{ matrix.arch }}"
          fyne package -os darwin -name "$BIN_NAME" -icon ssh.png
          zip -r "$BIN_NAME.app.zip" "$BIN_NAME.app"

      # Build Windows
      - name: Build Windows binary
        if: matrix.os == 'windows-latest'
        run: |
          BIN_NAME="ssh-tunnel-gui-windows-${{ matrix.arch }}"
          fyne package -os windows -name "$BIN_NAME" -icon ssh.png

      # Upload Linux
      - name: Upload Linux binary to release
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./ssh-tunnel-gui-linux-${{ matrix.arch }}
          asset_name: ssh-tunnel-gui-linux-${{ matrix.arch }}
          asset_content_type: application/octet-stream

      # Upload macOS
      - name: Upload macOS .app.zip to release
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./ssh-tunnel-gui-macos-${{ matrix.arch }}.app.zip
          asset_name: ssh-tunnel-gui-macos-${{ matrix.arch }}.zip
          asset_content_type: application/zip

      # Upload Windows
      - name: Upload Windows executable to release
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./ssh-tunnel-gui-windows-${{ matrix.arch }}.exe
          asset_name: ssh-tunnel-gui-windows-${{ matrix.arch }}.exe
          asset_content_type: application/octet-stream
